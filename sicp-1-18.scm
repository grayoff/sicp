(define (exp1 b n)
  (if (= n 0) 1 (* b (exp1 b (- n 1)))))
(define (exp2 b n)
  (exp2-iter 1 b n))
(define (exp2-iter a b n)
  (if (= n 0) a (exp2-iter (* b a) b (- n 1))))
(define (exp3 b n)
  (cond ((= n 0) 1)
        ((even? n) (exp3 (square b) (/ n 2)))
        (else (* b (exp3 b (- n 1))))))
(define (even? x)
  (= (% x 2) 0))
(define (square x)
  (* x x))
(define (exp4 b n)
  (exp4-iter 1 b n))
(define (exp4-iter a b n)
  (cond ((= n 0) a)
        ((even? n) (exp4-iter a (square b) (/ n 2)))
        (else (exp4-iter (* a b) b (- n 1)))))


(define (mul1 a b)
  (if (= a 0) 0 (+ b (mul1 (- a 1) b))))
(define (mul2 a b)
  (mul2-iter a b 0))
(define (mul2-iter a b p)
  (if (= a 0) p (mul2-iter (- a 1) b (+ p b))))
(define (double x) (<< x 1))
(define (halve x) (>> x 1))
(define (mul3 a b)
  (cond ((= a 0) 0)
        ((even? a) (mul3 (halve a) (double b)))
        (else (+ b (mul3 (- a 1) b)))))
(define (mul4 a b)
  (mul4-iter 0 a b))
(define (mul4-iter p a b)
  (cond ((= a 0) p)
        ((even? a) (mul4-iter p (halve a) (double b)))
        (else (mul4-iter (+ p b) (- a 1) b))))

(double 4)
(halve 4)

(mul1 2000 30000)
(mul2 2000 30000)
(mul3 2000 30000)
(mul4 2000 30000)
