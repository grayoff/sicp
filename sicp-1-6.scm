(define (sqrt-iter guess x) 
  (new-if (good-enough? guess x)
      guess
      (sqrt-iter (better-guess guess x) x)))
(define (good-enough? guess x)
  (< (abs (- x (square guess))) 0.001))
(define (better-guess guess x)
  (average guess (/ x guess)))
(define (average a b)
  (/ (+ a b) 2))
(define (square x) (* x x))
(define (sqrt x) (sqrt-iter 1.0 x))
(define (new-if predicate true-clause false-clause)
  (cond (predicate true-clause)
        (else false-clause)))
(square 2)
(average 2.0 3)
(better-guess 1.0 2)
(good-enough? 1.4142 2)
(good-enough? 1.5 2)
(new-if true 0 1)
(new-if false 0 1)
(sqrt 2)
(sqrt 9)
(sqrt 16)
(sqrt 144)