(define (expmod b e m)
  (cond ((= e 0) 1)
        ((even? e) (% (square (check-root (expmod b (/ e 2) m) m)) m))
        (else (% (* b (expmod b (- e 1) m)) m))))
(define (square x)
  (* x x))
(define (even? x)
  (= (% x 2) 0))
(define (check-root x n)
  (cond ((= x 1) 0)
        ((= x (- n 1)) 0)
        (else x)))

(define (miller-rabin-test n)
  (test-it n (+ 1 (random (- n 1)))))
(define (test-it n a)
  (= (expmod a (- n 1) n) 0))


(define (miller-rabin-check n)
  (check-it n 5))
(define (check-it n cnt)
  (cond ((= cnt n) true)
        ((test-it n cnt) (check-it n (+ cnt 1)))
        (else false)))

(miller-rabin-check 7)
(miller-rabin-check 11)
(miller-rabin-check 83)
(miller-rabin-check 82)
(miller-rabin-check 561)
(miller-rabin-check 1105)
(miller-rabin-check 1729)
(miller-rabin-check 2465)
